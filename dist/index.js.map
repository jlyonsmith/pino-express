{"version":3,"sources":["../src/index.js"],"names":["chalk","split","Parse","levelMap","red","yellow","cyan","pretty","options","eol","isPinoLine","line","hasOwnProperty","v","parseLine","parsed","obj","value","err","time","Date","toISOString","req","res","method","green","url","originalUrl","responseTime","remoteAddr","ip","length","headers","status","statusCode","level","pid","hostname","line2","msg","type","stack","slice","join","config","log","isProduction","onResFinished","error","removeListener","info","reqInfo","resInfo","now","startTime","get","next","addListener"],"mappings":"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","file":"index.js","sourcesContent":["import chalk from 'chalk'\nimport split from 'split2'\nimport Parse from 'fast-json-parse'\n\nconst levelMap = {\n  60: chalk.red('FATAL'),\n  50: chalk.red('ERROR'),\n  40: chalk.yellow('WARN'),\n  30: 'INFO',\n  20: chalk.cyan('DEBUG'),\n  10: chalk.cyan('TRACE')\n}\nexport function pretty(options) {\n  const eol = options.eol || '\\n'\n\n  function isPinoLine(line) {\n    return line &&\n      line.hasOwnProperty('hostname') &&\n      line.hasOwnProperty('pid') &&\n      (line.hasOwnProperty('v') && line.v === 1)\n  }\n\n  function parseLine(line) {\n    const parsed = new Parse(line)\n    const obj = parsed.value\n\n    if (parsed.err || !isPinoLine(obj)) {\n      return line + eol\n    }\n\n    const time = new Date(obj.time).toISOString()\n\n    if (obj.req && obj.res) {\n      const method = chalk.green(obj.req.method)\n      const url = obj.req.originalUrl\n      const responseTime = obj.res.responseTime\n      const remoteAddr = obj.req.ip\n      const length = obj.res.headers['Content-Length'] || 0\n      let status = obj.res.statusCode\n\n      status =\n        status >= 500 ? chalk.red(status) :\n        status >= 400 ? chalk.yellow(status) :\n        status >= 300 ? chalk.cyan(status) :\n        status >= 200 ? chalk.green(status) :\n        status\n\n      return `[${time}] ${remoteAddr} - ${method} ${url} ${status} ${responseTime} ms - ${length}${eol}`\n    } else {\n      const level = levelMap[obj.level] || 'USER'\n      const pid = obj.pid\n      const hostname = obj.hostname\n      let line2 = `[${time}] ${level} (${pid} on ${hostname}): ${chalk.cyan(obj.msg)}${eol}`\n\n      if (obj.type === 'Error') {\n         line2 += `${obj.stack.split(/\\r?\\n/).slice(1).join(eol)}${eol}`\n      }\n\n      return line2\n    }\n  }\n\n  return split(parseLine)\n}\n\nexport function config(options) {\n  const log = options.log\n  const isProduction = options.isProduction || false\n\n  function onResFinished(error) {\n    this.removeListener('finish', onResFinished)\n    this.removeListener('error', onResFinished)\n\n    if (error) {\n      log.error(error)\n      return\n    }\n\n    if (isProduction) {\n      log.info({ req: this.req, res: this })\n    } else {\n      // We don't need as much information for simple debug messages\n\n      const reqInfo = {\n        method: this.req.method,\n        ip: this.req.ip,\n        originalUrl: this.req.originalUrl\n      }\n\n      const resInfo = {\n        responseTime: Date.now() - this.startTime,\n        statusCode: this.statusCode,\n        headers: {\n          'Content-Length': this.get('Content-Length')\n        }\n      }\n\n      log.info({ req: reqInfo, res: resInfo })\n    }\n  }\n\n  return function(req, res, next) {\n    res.startTime = res.startTime || Date.now()\n    res.addListener('finish', onResFinished)\n    res.addListener('error', onResFinished)\n    next()\n  }\n}\n"]}