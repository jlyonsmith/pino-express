{"version":3,"sources":["../src/index.test.js"],"names":["pinoExpress","MockPino","constructor","opts","stream","info","obj","msg","write","JSON","stringify","encoding","test","done","pretty","mockStdout","mockLog","pipe","expect","toString","toMatch","hostname","pid","v","time","level"],"mappings":";;AAAA;;IAAYA,W;;AACZ;;AACA;;;;;;;;AAEA,MAAMC,QAAN,CAAe;AACbC,cAAYC,IAAZ,EAAkBC,MAAlB,EAA0B;AACxB,4BAAS,IAAT;AACA,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAcA,MAAd;AACD;;AAEDC,OAAKC,GAAL,EAAUC,GAAV,EAAe;AACbD,QAAIC,GAAJ,GAAUA,OAAO,EAAjB;AACA,SAAKH,MAAL,CAAYI,KAAZ,CAAkBC,KAAKC,SAAL,CAAeJ,GAAf,CAAlB,EAAuC,EAAEK,UAAU,MAAZ,EAAvC;AACD;AAVY;;AAafC,KAAK,oBAAL,EAA2B,MAAOC,IAAP,IAAgB;AACzC,QAAMC,SAASd,YAAYc,MAAZ,CAAmB,EAAnB,CAAf;AACA,QAAMC,aAAa,mCAAnB;AACA,QAAMC,UAAU,IAAIf,QAAJ,CAAa,EAAb,EAAiBc,UAAjB,CAAhB;AACA,QAAMT,MAAM,EAAE,YAAY,IAAd,EAAZ;;AAEAQ,SAAOG,IAAP,CAAYF,UAAZ;;AAEAC,UAAQX,IAAR,CAAaC,GAAb;AACAY,SAAOH,WAAWI,QAAX,EAAP,EAA8BC,OAA9B,CAAsCX,KAAKC,SAAL,CAAeJ,GAAf,CAAtC;AACAO;AACD,CAXD;;AAaAD,KAAK,gBAAL,EAAuB,MAAOC,IAAP,IAAgB;AACrC,QAAMC,SAASd,YAAYc,MAAZ,CAAmB,EAAnB,CAAf;AACA,QAAMC,aAAa,mCAAnB;AACA,QAAMC,UAAU,IAAIf,QAAJ,CAAa,EAAb,EAAiBc,UAAjB,CAAhB;AACA,QAAMT,MAAM,EAAEe,UAAU,WAAZ,EAAyBC,KAAK,GAA9B,EAAmCC,GAAG,CAAtC,EAAyCC,MAAM,aAA/C,EAA8DC,OAAO,EAArE,EAAZ;;AAEAX,SAAOG,IAAP,CAAYF,UAAZ;;AAEAC,UAAQX,IAAR,CAAaC,GAAb;AACAY,SAAOH,WAAWI,QAAX,EAAP,EAA8BC,OAA9B,CAAsCX,KAAKC,SAAL,CAAeJ,GAAf,CAAtC;AACAO;AACD,CAXD","file":"index.test.js","sourcesContent":["import * as pinoExpress from '.'\nimport { WritableStream } from 'memory-streams'\nimport autoBind from 'auto-bind2'\n\nclass MockPino {\n  constructor(opts, stream) {\n    autoBind(this)\n    this.opts = opts\n    this.stream = stream\n  }\n\n  info(obj, msg) {\n    obj.msg = msg || ''\n    this.stream.write(JSON.stringify(obj), { encoding: 'utf8' })\n  }\n}\n\ntest('test not pino JSON', async (done) => {\n  const pretty = pinoExpress.pretty({})\n  const mockStdout = new WritableStream()\n  const mockLog = new MockPino({}, mockStdout)\n  const obj = { \"not_pino\": true }\n\n  pretty.pipe(mockStdout)\n\n  mockLog.info(obj)\n  expect(mockStdout.toString()).toMatch(JSON.stringify(obj))\n  done()\n})\n\ntest('test pino JSON', async (done) => {\n  const pretty = pinoExpress.pretty({})\n  const mockStdout = new WritableStream()\n  const mockLog = new MockPino({}, mockStdout)\n  const obj = { hostname: 'localhost', pid: 123, v: 1, time: 1510859218915, level: 30 }\n\n  pretty.pipe(mockStdout)\n\n  mockLog.info(obj)\n  expect(mockStdout.toString()).toMatch(JSON.stringify(obj))\n  done()\n})\n"]}